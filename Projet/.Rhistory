L.y.nonpara <- function(y.bar, S.y, y.vec) {
L.i <- t(y.bar) %*% solve(S.y) %*% y.vec - 0.5 * t(y.bar) %*% solve(S.y) %*% y.bar
return(as.numeric(L.i))
}
sub.class <- function(df) {
g.class <- numeric(nrow(df))
n1 <- nrow(df[df$Group==1,])
n2 <- nrow(df[df$Group==2,])
n3 <- nrow(df[df$Group==3,])
N <- n1 + n2 + n3
k <- length(unique(df$Group))
y1.bar.df <- colMeans(df[df$Group==1,-1])
y2.bar.df <- colMeans(df[df$Group==2,-1])
y3.bar.df <- colMeans(df[df$Group==3,-1])
S1.y.df <- cov(df[df$Group==1,-1])
S2.y.df <- cov(df[df$Group==2,-1])
S3.y.df <- cov(df[df$Group==3,-1])
Sc.df <- (1/(N - k)) * ((n1 - 1) * S1.y.df + (n2 - 1) * S2.y.df + (n3 - 1) * S3.y.df)
for (j in 1:nrow(df)) {
y <- as.numeric(df[j, -1])
scores <- c(L.y.nonpara(y1.bar.df, Sc.df, y),
L.y.nonpara(y2.bar.df, Sc.df, y),
L.y.nonpara(y3.bar.df, Sc.df, y))
g.class[j] <- which.max(scores)
}
return(g.class)
}
err.part.vec <- err.func.part(donnee, B = 100)
contrast_2_vs_3 <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ Group, data = donnee, subset = Group %in% c(2, 3))
summary(contrast_2_vs_3, test = "Wilks")
donnee$GroupCombined <- as.factor(ifelse(donnee$Group == 1, "1", "2_3"))
contrast_2_3_vs_1 <- manova(cbind(WDIM, CIRCUM, FBEYE, EYEHD, EARHD, JAW) ~ GroupCombined, data = donnee)
summary(contrast_2_3_vs_1, test = "Wilks")
nouvelle_donnee <- donnee[donnee$Group %in% c(2, 3), ]
nouvelle_donnee
donnees_numeriques <- nouvelle_donnee[sapply(nouvelle_donnee, is.numeric)]
y.bar <- as.numeric(colMeans(donnees_numeriques))
S.y <- as.matrix(cov(donnees_numeriques))
SpecDec.S <- eigen(S.y)
a1 <- SpecDec.S$vectors[, 1]
a2 <- SpecDec.S$vectors[, 2]
a1
a2
donnees_numeriques$z1 <- a1[1] * (donnees_numeriques$Var1 - y.bar[1]) + a1[2] * (donnees_numeriques$Var2 - y.bar[2])
g.class <- sub.class(donnee)
L.y.nonpara <- function(y.bar, S.y, y.vec) {
L.i <- t(y.bar) %*% solve(S.y) %*% y.vec - 0.5 * t(y.bar) %*% solve(S.y) %*% y.bar
return(as.numeric(L.i))
}
impo.disc <- numeric(Vh)
for (j in 1:Vh) {
impo.disc[j] <- Specdec$values[j] / sum(Specdec$values[1:Vh])
}
print(impo.disc)
ggplot(donnee, aes(x = z1, y = z2, colour = Group)) +
geom_point()
a1 <- Specdec$vectors[,1]
a2 <- Specdec$vectors[,2]
a1
a2
Specdec <- eigen(solve(E) %*% H)
Specdec
Specdec <- eigen(solve(E) %*% H)
Specdec
H <- manov.output$SS$Group
E <- manov.output$SS$Residuals
H
E
setwd("D:/Documents/Trimestre Actuel/STT3200 - Synthèse/Stats-Syntese/Projet")
d1=read.table("student-mat.csv",sep=";",header=TRUE)
d2=read.table("student-por.csv",sep=";",header=TRUE)
d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
print(nrow(d3)) # 382 students
mathematique <- read.table("student-mat.csv", header = T, sep = ",")
portugais <- read.table("student-por.csv", header = T, sep = ",")
heat(mathematique)
head(mathematique)
mtravel <- mathematique$traveltime
ptravel <- portugais$traveltime
mTravelTime <- mathematique$traveltime
pTravelTime <- portugais$traveltime
mTravelTime <- mathematique$traveltime
pTravelTime <- portugais$traveltime
mStudyTime <- mathematique$studytime
pStudyTime <- portugais$studytime
mFailures <- mathematique$failures
pFailures <- portugais$failures
mSchoolSup <- mathematique$schoolsup
pSchoolSup <- portugais$schoolsup
mFamSup <- mathematique$famsup
pFamSup <- portugais$famsup
mPaid <- mathematique$paid
pPaid <- portugais$paid
mInternet <- mathematique$internet
pInternet <- portugais$internet
mFreeTime <- mathematique$freetime
pFreeTime <- portugais$freetime
mDalc <- mathematique$Dalc
PDalc <- portugais$Dalc
mWalc <- mathematique$Walc
pWalc <- portugais$Walc
mAbsences <- mathematique$absences
pAbsences <- portugais$absences
mG3 <- mathematique$g3
pG3 <- portugais$g3
psych::describe.by(mG3, group = mtraveltime)
##############################################
mTravelTime <- mathematique$traveltime
psych::describe.by(mG3, group = mTravelTime)
psych::describeBy(mG3, group = mTravelTime)
library(psych)
library(ggstatsplot)
psych::describeBy(mG3, group = mTravelTime)
mG3
mAbsences
mG3
mG3 <- mathematique$g3
pG3 <- portugais$g3
psych::describeBy(mG3, group = mTravelTime)
mG3
mathematique$g3
mathematqiue
mathematique
mG3 <- mathematique$g3
mG3
mathematique$g3
mG3 <- mathematique$G3
mathematique$G3
mG3 <- mathematique$G3
pG3 <- portugais$G3
psych::describeBy(mG3, group = mTravelTime)
ggstatsplot::ggbetweenstats(
data = mathematique, x = mTravelTime, y = G3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = mathematique, x = traveltime, y = G3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = mathematique, x = log(traveltime), y = G3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
mathematique$logTraveltime <- log(mTravelTime)
ggstatsplot::ggbetweenstats(
data = mathematique, x = logTraveltime , y = G3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
logTraveltime
mathematique$logTraveltime
mTravelTime
mathematique$logG3 <- log(mG3)
ggstatsplot::ggbetweenstats(
data = mathematique, x = traveltime, y = logG3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
mathematique$logG3 <- log(mG3)
mG3
mathematique$logG3
ggstatsplot::ggbetweenstats(
data = mathematique, x = traveltime, y = logG3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
mathematique$logG3 <- log(mG3+1)
ggstatsplot::ggbetweenstats(
data = mathematique, x = traveltime, y = logG3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
mathematique$logG3 <- log(mG3+2)
ggstatsplot::ggbetweenstats(
data = mathematique, x = traveltime, y = logG3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
# Créer un histogramme pour la variable G3
hist(mathematiques$G3,
main = "Histogramme de la variable G3",
xlab = "Valeurs de G3",
ylab = "Fréquence",
col = "skyblue",
border = "white")
# Créer un histogramme pour la variable G3
hist(mathematique$G3,
main = "Histogramme de la variable G3",
xlab = "Valeurs de G3",
ylab = "Fréquence",
col = "skyblue",
border = "white")
# Créer un histogramme pour la variable G3
hist(portugais$G3,
main = "Histogramme de la variable G3",
xlab = "Valeurs de G3",
ylab = "Fréquence",
col = "skyblue",
border = "white")
# Créer un histogramme pour la variable G3
hist(mathematique$G1,
main = "Histogramme de la variable G3",
xlab = "Valeurs de G3",
ylab = "Fréquence",
col = "skyblue",
border = "white")
# Créer un histogramme pour la variable G3
hist(mathematique$G2,
main = "Histogramme de la variable G3",
xlab = "Valeurs de G3",
ylab = "Fréquence",
col = "skyblue",
border = "white")
# Créer un histogramme pour la variable G3
hist(mathematique$G3,
main = "Histogramme de la variable G3",
xlab = "Valeurs de G3",
ylab = "Fréquence",
col = "skyblue",
border = "white")
# Créer un histogramme pour la variable G3
hist(portugais$G1,
main = "Histogramme de la variable G3",
xlab = "Valeurs de G3",
ylab = "Fréquence",
col = "skyblue",
border = "white")
hist(portugais$G2,
main = "Histogramme de la variable G3",
xlab = "Valeurs de G3",
ylab = "Fréquence",
col = "skyblue",
border = "white")
hist(portugais$G3,
main = "Histogramme de la variable G3",
xlab = "Valeurs de G3",
ylab = "Fréquence",
col = "skyblue",
border = "white")
which(G3 < 1)
which(mG3 < 1)
mG3[129]
mG3
leaf_plot(mG3)
install.packages("leafplot")
library(leafplot)
leaf_plot(mG3)
print(mG3[mG3 >= 0 & mG3 <= 1])
print(mG3[mG3 >= 0 & mG3 <= 1])
print(mG3[mG2 >= 0 & mG2 <= 1])
print(mG3[mathematique$G2 >= 0 & mathematique$G2 <= 1])
print(mG3[mathematique$G1 >= 0 & mathematique$G1 <= 1])
print(mG3[portugais$G1 >= 0 & portugais$G1 <= 1])
print(mG3[portugais$G2 >= 0 & portugais$G2 <= 1])
print(mG3[portugais$G3 >= 0 & portugais$G3 <= 1])
print(mathematique$G2[mathematique$G2 >= 0 & mathematique$G2 <= 1])
print(mathematique$G1[mathematique$G1 >= 0 & mathematique$G1 <= 1])
print(portugais$G1[portugais$G1 >= 0 & portugais$G1 <= 1])
print(portugais$G2[portugais$G2 >= 0 & portugais$G2 <= 1])
print(portugais$G3[portugais$G3 >= 0 & portugais$G3 <= 1])
print(mathematique$G3[mathematique$G3 >= 0 & mathematique$G3 <= 5])
print(mathematique$G2[mathematique$G2 >= 0 & mathematique$G2 <= 5])
print(mathematique$G1[mathematique$G1 >= 0 & mathematique$G1 <= 5])
print(portugais$G1[portugais$G1 >= 0 & portugais$G1 <= 5])
print(portugais$G2[portugais$G2 >= 0 & portugais$G2 <= 5])
print(portugais$G3[portugais$G3 >= 0 & portugais$G3 <= 5])
which(mathematique$G3 == 0)
mathematique <- mathematique[mathematique$G3 != 0, ]
which(mathematique$G3)
which(mathematique$G3 == 0)
which(mathematique$G2 == 0)
which(mathematique$G1 == 0)
which(portugais$G3 == 0)
which(portugais$G3 == 0)
portugais <- portugais[portugais$G3 != 0, ]
which(portugais$G3 == 0)
which(portugais$G2 == 0)
which(portugais$G1 == 0)
portugais$G1
portugais[1]
ligne_zero_G1 <- subset(portugais, G1 == 0)
print(ligne_zero_G1)
# analyse du temps pour aller à l'école en premier
psych::describeBy(mG3, group = mTravelTime)
ggstatsplot::ggbetweenstats(
data = mathematique, x = traveltime, y = G3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = mathematique, x = traveltime, y = G3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = F,
bf.message = FALSE,
)
mathematique$logG3 <- log(mG3+2)
library(psych)
library(ggstatsplot)
mathematique <- read.table("student-mat.csv", header = T, sep = ",")
View(mathematique)
portugais <- read.table("student-por.csv", header = T, sep = ",")
View(portugais)
dim(portugais)
######################################################################################################
#je trouve qu'il y a vraiment trop de 0 dans les données, c'est ma démarche ici
# Créer un histogramme pour la variable G3
hist(mathematique$G1,
main = "Histogramme de la variable G3",
xlab = "Valeurs de G3",
ylab = "Fréquence",
col = "skyblue",
border = "white")
# Créer un histogramme pour la variable G3
hist(mathematique$G2,
main = "Histogramme de la variable G3",
xlab = "Valeurs de G3",
ylab = "Fréquence",
col = "skyblue",
border = "white")
# Créer un histogramme pour la variable G3
hist(mathematique$G3,
main = "Histogramme de la variable G3",
xlab = "Valeurs de G3",
ylab = "Fréquence",
col = "skyblue",
border = "white")
# Créer un histogramme pour la variable G3
hist(portugais$G1,
main = "Histogramme de la variable G3",
xlab = "Valeurs de G3",
ylab = "Fréquence",
col = "skyblue",
border = "white")
hist(portugais$G2,
main = "Histogramme de la variable G3",
xlab = "Valeurs de G3",
ylab = "Fréquence",
col = "skyblue",
border = "white")
hist(portugais$G3,
main = "Histogramme de la variable G3",
xlab = "Valeurs de G3",
ylab = "Fréquence",
col = "skyblue",
border = "white")
print(mathematique$G3[mathematique$G3 >= 0 & mathematique$G3 <= 5])
print(mathematique$G2[mathematique$G2 >= 0 & mathematique$G2 <= 5])
print(mathematique$G1[mathematique$G1 >= 0 & mathematique$G1 <= 5])
print(portugais$G1[portugais$G1 >= 0 & portugais$G1 <= 5])
print(portugais$G2[portugais$G2 >= 0 & portugais$G2 <= 5])
print(portugais$G3[portugais$G3 >= 0 & portugais$G3 <= 5])
which(mathematique$G3 == 0)
mathematique <- mathematique[mathematique$G3 != 0, ]
which(mathematique$G3 == 0)
which(mathematique$G2 == 0)
which(mathematique$G1 == 0)
which(portugais$G3 == 0)
portugais <- portugais[portugais$G3 != 0, ]
which(portugais$G3 == 0)
which(portugais$G2 == 0)
which(portugais$G1 == 0)
##############################################
mTravelTime <- mathematique$traveltime
pTravelTime <- portugais$traveltime
mStudyTime <- mathematique$studytime
pStudyTime <- portugais$studytime
mFailures <- mathematique$failures
pFailures <- portugais$failures
mSchoolSup <- mathematique$schoolsup
pSchoolSup <- portugais$schoolsup
mFamSup <- mathematique$famsup
pFamSup <- portugais$famsup
mPaid <- mathematique$paid
pPaid <- portugais$paid
mInternet <- mathematique$internet
pInternet <- portugais$internet
mFreeTime <- mathematique$freetime
pFreeTime <- portugais$freetime
mDalc <- mathematique$Dalc
PDalc <- portugais$Dalc
mWalc <- mathematique$Walc
pWalc <- portugais$Walc
mAbsences <- mathematique$absences
pAbsences <- portugais$absences
mG3 <- mathematique$G3
pG3 <- portugais$G3
# analyse du temps pour aller à l'école en premier
psych::describeBy(mG3, group = mTravelTime)
ggstatsplot::ggbetweenstats(
data = mathematique, x = traveltime, y = G3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = F,
bf.message = FALSE,
)
mathematique$logG3 <- log(mG3+2)
ggstatsplot::ggbetweenstats(
data = mathematique, x = traveltime, y = logG3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
dim(mathematique)
getwd()
setwd("~/Trimestre Actuel/STT3200 - Synthèse/Stats-Syntese/Projet")
mG3
ggstatsplot::ggbetweenstats(
data = mathematique, x = Dalc, y = G3,
title = "Hauteur ~ Hemisphere",
mean.ci = TRUE,
type="p",
var.equal = F,
bf.message = FALSE,
)
# Pour le niveau de traveltime = 1, par exemple
qqnorm(donnees$g3[donnees$traveltime == 1])
# Pour le niveau de traveltime = 1, par exemple
qqnorm(donnees$mG3[mTravelTime == 1])
# Pour le niveau de traveltime = 1, par exemple
qqnorm(mG3[mTravelTime == 1])
qqline(mG3[mTravelTime == 1], col = "red")
ggstatsplot::ggbetweenstats(
data = mathematique, x = traveltime, y = G3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = F,
bf.message = FALSE,
)
resultat_welch <- oneway.test(G3 ~ traveltime, data = mathematique, var.equal = FALSE)
resultat_welch
resultat_welch
print(resultat_welch)
# analyse du temps pour aller à l'école en premier
psych::describeBy(pG3, group = pTravelTime)
ggstatsplot::ggbetweenstats(
data = portugais, x = traveltime, y = G3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = F,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = portugais, x = traveltime, y = logG3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = F,
bf.message = FALSE,
)
ggstatsplot::ggbetweenstats(
data = mathematique, x = traveltime, y = logG3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = T,
bf.message = FALSE,
)
portugais$racineG3 <- sqrt(portugais$G3)
ggstatsplot::ggbetweenstats(
data = portugais, x = traveltime, y = racineG3,
title = "La note finale en fonction du temps de voyage",
mean.ci = TRUE,
type="p",
var.equal = F,
bf.message = FALSE,
)
qqnorm(mG3[mTravelTime == 1])
qqline(mG3[mTravelTime == 1], col = "red")
resultat_welch <- oneway.test(G3 ~ traveltime, data = portugais, var.equal = FALSE)
resultat_welch
resultat_welch
resultat_welch <- oneway.test(G3 ~ traveltime, data = mathematique, var.equal = FALSE)
resultat_welch
resultat_welch <- oneway.test(G3 ~ traveltime, data = portugais, var.equal = FALSE)
resultat_welch
